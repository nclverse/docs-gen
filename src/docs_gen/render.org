#+options: toc:nil num:nil

* Namespaces
  
#+BEGIN_SRC clojure
(ns docs-gen.render
  (:require [stasis.core :as stasis]
            [ring.middleware.content-type :refer [wrap-content-type]]
            [prone.debug :refer [debug]]
            [docs-gen.transform :as transform]))

#+END_SRC

The above namespaces are used for the following:
Stasis: collecting directories and files.
Ring middleware: Serving the correct content type.
Prone Debug: Debugging Clojure code in the browser.
Java Shell: Running Emacs to convert org files to HTML.
Enlive: Metadata collection.


* Transform

** Transform URLS

*** Replace Org
    Replaces .org with given string

#+BEGIN_SRC clojure
(defn replace-org [url replacement]
(clojure.string/replace url #".org" replacement))
#+END_SRC

*** Format Navigation Links

Helper functions to strip all numbers followed by a single hyphen. Used to format the
URLs which have Kebab case.

#+BEGIN_SRC clojure
(def clean-numbering #(clojure.string/replace % #"\d+-" ""))

(defn format-nav-links [word]
  (clojure.string/join " " (map clojure.string/capitalize (clojure.string/split (clean-numbering word) #"-"))))
#+END_SRC


** Transform Pages
    We convert each org page to HTML using Emacs.

*** Org to HTML
     This uses a script stored inside the resources directory to
     convert org file to HTML using the config options specified per
     file. Need to decide if a global org file config makes sense.

#+BEGIN_SRC clojure

   (defn org->html [org-content]
   "Prerequisite: Emacs with Org-Mode installed.
   Converts given org file to html."
   (:out (sh "emacs" "--script" "resources/scripts/org-to-html.el" org-content)))

#+END_SRC


** Metadata Collection Helpers

*** Word Count

#+BEGIN_SRC clojure
(defn word-count [entry]
   (let [nodes (select-nodes* (html-snippet entry) [text-node])
   text (apply str nodes)]
   (count (re-seq #"\w+" (.toLowerCase text)))))

(defn loc [entry]
   (let [nodes (select-nodes* (select (html-snippet entry) [:pre]) [text-node])
   text (apply str nodes)]
   (count (re-seq #"\n" text))))

#+END_SRC

#+ATTR_HTML :class smell
*** URL Components
      Pretty contrived right now but supports all the current
      documentation sites. Better to make this support. Need to
      change this to support arbitrary amount of nesting. 5 seems like
      a good limit if arbitrary nesting is a bad idea. Need to reflect
      on this problem further.

#+BEGIN_SRC clojure
(defn url-components [url]
  (zipmap [:category :title :subtitle] (filter not-empty (clojure.string/split url #"/"))))
#+END_SRC

*** Find Title

      Gets the title of the converted HTML page.

#+BEGIN_SRC clojure
(defn title [x]
  (first
   (select
   (html-snippet x) [:h1 text-node])))
#+END_SRC

*** Weave metadata

Collect metadata from HTML pages
Creates a map of the form:

#+BEGIN_SRC clojure

(defn collect-meta-data [url page] {:page page :url (url-components url) :meta {:title (title page)}})

#+END_SRC


* Renderers
  
   Recombining the pages that have been transformed and rendering them.
   Comes in two flavours. One with meta data collection (involves
   expensive computation, slows down the generator considerably) and one
   without(quick).


#+BEGIN_SRC clojure

(defn quick-render [root site page]
(view/transform-page root site [] (collect-meta-data site (org->html page))))

#+END_SRC

*** Render with Meta

    Weaves the metadata of all pages with the current page.
    Gives out a map of url with the pages weaved with meta data.
    

#+BEGIN_SRC clojure

(defn full-render [root site urls pages]
(let [html-pages (map org->html pages)
pages-with-meta-data (map collect-meta-data urls html-pages)
nav (map #(into (url-components (replace-org %1 "")) {:count (loc %2)}) urls html-pages)
sorted-nav (sort-by #(vec (map % [:title :subtitle])) nav)]
(map (partial view/transform-page root site sorted-nav) pages-with-meta-data)))
#+END_SRC

* Finale
  
  Servers or exports the pages. A multimethod to either render or export based on the configuration.

#+BEGIN_SRC clojure

(defmulti render :mode)

(defmethod render :render [config]
(wrap-content-type (stasis/serve-pages (collect-files config))))

(defmethod render :export [config]
  (stasis/export-pages (collect-files config) (:output config)))

#+END_SRC

;(render config)

# Local Variables:
# lentic-init: lentic-org-clojure-init
# End:
